https://learnxinyminutes.com/docs/javascript/

Backticks embed the expression inside ${...} into the string.

DataTypes:  Number(Â±(253-1))
            BigInt(// the "n" at the end means it's a BigInt   ;  const bigInt = 1234567890123456789012345678901234567890n;)
            String(No Character Type)
            Boolean
            null: reference to a nonexisting object,nothing,empty,or unknown
            undefined: value not assigned
            Object
            symbol
    We can:
      find the dataType of X:
        typeof(x);
        typeof x

If function call is missing parameter, parameter will be set to undefined. --> NO COMPILE ERROR

?? --> means: if undefined or null EX: // if count is undefined or null, show "unknown"
                                                             alert(count ?? "unknown");
If a function does not return a value, it is the same as if it returns undefined:
An empty return is also the same as return undefined:
            We can: Check if undefined with ===

BuiltIn Functions:
            min(x,y)
            pow(x,y)

~~
function sayHi() {   // (1) create
  alert( "Hello" );
}

let func = sayHi;    // (2) the sayHi method now has copied the function into func.
                        If it was sayHi() --> func would have the result of sayHi

func(); // Hello     // (3) run the copy (it works)!
sayHi(); // Hello    //     this still works too (why wouldn't it)
~~

We can also create function like :
                        let sayHi = function() {
                          alert( "Hello" );
                        };
~~~
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "Do you agree?",
  function() { alert("You agreed."); },
  function() { alert("You canceled the execution."); }
);

https://javascript.info/arrow-functions-basics

To select html from javascript:
	const container = document.querySelector('#container');
To create html element from javascript:
	const div = document.createElement('div');	
    		parentNode.appendChild(childNode) appends childNode as the last child of parentNode
    		parentNode.insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode
		
    parentNode.removeChild(child) removes child from parentNode on the DOM and returns reference to child
	

<!-- the html file -->
<button id="btn">Click Me Too</button>

// the JavaScript file
const btn = document.querySelector('#btn');
btn.addEventListener('click', () => {
  alert("Hello World");
});



//Filter ES6: user.email does not equal param(u) email, so True, then return that user.email back.
//If false, dont give it back.
function delete(u){
	users = users.filter(user => return user.email != u.email);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Javascript Objects~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Constructor
function Student(name, grade) {
  this.name = name
  this.grade = grade
}

//Prototype is basically Object Class in Java
//All Objects Inherits from Prototypes in Javascript
//Below means: Create a function in the Object Class, so that Other STUDENT Instances Can also use that function. Why? Helps with using less Resources.
Student.prototype.sayName = function() {
  console.log(this.name)
}
Student.prototype.goToProm = function() {
  console.log("Eh.. go to prom?")
}
//Below means: Let Admin Class use Student's Constructor to create the Object, so admin Class can inherit from Student Class. 
function Admin(...args) {
	User.apply(this, args);
	this.role = 'super admin'
}

//Below Means: Let Admin Prototype point to Student's Prototype so that Admin has Student's prototypes functions
//Note: Not creating a copy into Admin. Student's Prototype will be Nested inside Admin's Prototype.
Admin.prototype = Object.create(Student.prototype);

